# -*- coding: utf-8 -*-
"""email_spam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/RohanRajGupta/-OIBSIP_Task4_Email_Spam_Detection_-main/blob/main/-OIBSIP_Task4_Email_Spam_Detection_-main/email_spam.ipynb

# Email Spam Detection using Machine Learning
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as pt
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import CountVectorizer
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
import re

data_spam=pd.read_csv("C:\\Users\\nk4au\\OneDrive\\Desktop\\Oasisdataset\\spam.csv")

data_spam

data_spam.head(5)

data_spam.tail(5)

"""### Basic Info About the DataSet

"""

data_spam.info()

data_spam.describe()

data_spam.shape

data_spam.size

data_spam.columns

data_spam.isnull().sum() #checking null values

data_spam.duplicated().sum() #checking duplicate values

"""### Cleaning

##### Dropping Unwanted Columns
"""

data_spam.drop(columns=['Unnamed: 2','Unnamed: 3','Unnamed: 4'],inplace=True)

data_spam

"""###### Deleting duplicate data"""

data_spam.drop_duplicates(keep = 'first', inplace = True)

data_spam.duplicated().sum()

data_spam.size

"""##### Renaming the columns"""

data_spam.rename(columns = {'v1' : 'Target', 'v2':'Message'}, inplace = True)

data_spam

"""### Visulaization of the Data"""

pt.figure(figsize=(6,8))
pt.pie(data_spam['Target'].value_counts(), labels = ['ham', 'spam'])
pt.show()

sb.pairplot(data_spam,hue='Target')

"""#### Number of words characters and sentences"""

data_spam['characters'] = data_spam['Message'].apply(len)

data_spam['words'] = data_spam['Message'].apply(lambda x:len(nltk.word_tokenize(x)))

data_spam['sentences'] = data_spam['Message'].apply(lambda x:len(nltk.sent_tokenize(x)))

data_spam.head()

#histogram for characters
pt.figure(figsize=(12,6))
#ham
sb.histplot(data_spam[data_spam['Target'] == 'ham']['characters'],color='yellow')
#spam
sb.histplot(data_spam[data_spam['Target'] == 'spam']['characters'],color='red')

#histogram for words
pt.figure(figsize=(12,6))
#ham
sb.histplot(data_spam[data_spam['Target'] == 'ham']['words'],color='yellow')
#spam
sb.histplot(data_spam[data_spam['Target'] == 'spam']['words'],color='red')

##### HeatMap
sb.heatmap(data_spam.corr(),annot=True)

"""### Data Modelling"""

m = data_spam['Message']
t= data_spam['Target']

t

m

def alter(text):

    #to make lowercase
    text = text.lower()

    #to tokenize
    text = nltk.word_tokenize(text)

    #removing special charecters
    y = []
    for i in text:
        if i.isalnum():
            y.append(i)

    text = y[:]
    y.clear()


    #Stemming
    from nltk.stem.porter import PorterStemmer
    ps=PorterStemmer()
    for i in text:
        y.append(ps.stem(i))


    return " ".join(y)

xtrain, xtest, ytrain, ytest = train_test_split(m,t, test_size = 0.2, random_state = 3)

"""### Logistic Regression"""

model_l = LogisticRegression()

featureextraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase='True',max_features=3000)
xtrainfeatures = feature_extraction.fit_transform(xtrain)
xtestfeatures = feature_extraction.transform(xtest)

model_l.fit(xtrainfeatures, ytrain)

predict= model_l.predict(xtrainfeatures)
acc= accuracy_score(ytrain, predict)

"""### Testing The Model"""

mail = input("Enter the text of the email :\n\n")

input1=alter(mail)
input1

inp= feature_extraction.transform([input1])

prediction=model_l.predict(inp)

if (prediction[0]==1):
    print('Spam mail')
else:
    print('Non-Spam mail')

"""###### Checking the Accuracy"""

accuracy= accuracy_score(ytrain, predict)*100

accuracy

